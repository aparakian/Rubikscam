library IEEE;
use IEEE.std_logic_1164.all;
use ieee.numeric_std.all;

entity CMOS_LA is
    port (
	 -- CLOCK
    CLOCK_25  : in std_logic;
	 CLOCK_50  : in std_logic;
	 -- material ports
    KEY       : in std_logic_vector( 3 downto 0);
    SW        : in std_logic_vector(15 downto 0);
    GPIO_1    : inout std_logic_vector(15 downto 0); -- direct link to CMOS (ie camera)
	 -- program used ports
	 CMOS_DATA : out std_logic_vector(9 downto 0) -- outgoing data from camera
    );
end CMOS_LA;

architecture CMOS_LA_arch of CMOS_LA is
-- configuration du CMOS par le bus I2C
component I2C_CMOS_Config is
    port (
    clk        : in std_logic;
    rst_n      : in std_logic;
    exposition : in std_logic_vector(15 downto 0);
    I2C_SCLK   : out std_logic;
    I2C_SDAT   : inout std_logic
    );
end component;

constant seuil     : std_logic_vector(9 downto 0) := "1000000000" ;
signal cam_pix_counter : integer range 0 to ((640*2)-1);
signal cam_line_counter : integer range 0 to ((480*2)-1);

signal CMOS_MCLK   : std_logic;
signal CMOS_SDAT   : std_logic;
signal CMOS_SCLK   : std_logic;
signal CMOS_FVAL   : std_logic;
signal CMOS_LVAL   : std_logic;
signal CMOS_PIXCLK : std_logic;

signal rst_n      : std_logic;
signal exposition : std_logic_vector(15 downto 0);

begin

rst_n <= KEY(0);
exposition <= SW(15 downto 0);

-- from CMOS
CMOS_DATA   <= GPIO_1(9 downto 0);
CMOS_PIXCLK <= GPIO_1(10);
CMOS_LVAL   <= GPIO_1(12);
CMOS_FVAL   <= GPIO_1(13);

-- to CMOS
CMOS_MCLK   <= CLOCK_25; -- 25MHz
GPIO_1(11) <= CMOS_MCLK; -- 25MHz

I2C_CMOS_Config_inst : I2C_CMOS_Config
port map (
          clk        => CLOCK_50,
          rst_n      => rst_n,
          exposition => exposition,
          I2C_SCLK   => GPIO_1(14), -- !!!! inout vers/depuis CMOS
          I2C_SDAT   => GPIO_1(15)  -- !!!! inout vers/depuis CMOS
          );

process (CMOS_PIXCLK)
begin
    if rising_edge(CMOS_PIXCLK) then
        if CMOS_FVAL ='1' then
            if CMOS_LVAL = '1' then
					-- Pixel treatement
					if (cam_line_counter mod 2)=0 and (cam_pix_counter mod 2)=0 then
					end if;
					-- End Pixel treatement
			      if cam_pix_counter < ((640*2)-1) then
               cam_pix_counter <= cam_pix_counter + 1;
               else 
						cam_pix_counter <= 0;
						if cam_pix_counter < ((480*2)-1) then
							cam_line_counter <= cam_line_counter + 1;
						else cam_line_counter <= 0;
						end if;
               end if;
            end if;
        else cam_pix_counter <= 0;
        end if;
    end if;
end process ;

end CMOS_LA_arch;
